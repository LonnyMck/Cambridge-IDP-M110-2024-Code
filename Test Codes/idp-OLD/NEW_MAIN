
/* Cambridge University IDP, Team M109, 2023 */
/*************************** HEADER ********************************************/
#include <Adafruit_MotorShield.h>
#include "Wire.h"
#include "DFRobot_VL53L0X.h"


enum block_type {NONE, LOW_DENSITY, HIGH_DENSITY};

/* Exported function prototypes */
int speed_var = 100;
void straight_ahead(int speed = speed_var);
void straight_backwards(int speed = speed_var);
void forwards_right(int speed = speed_var);
void forwards_left(int speed = speed_var);
void turn_right(int speed = 180);
void turn_left(int speed = 180);
void rotate_right(int speed = 100);
void rotate_left(int speed = 100);

void line_turn_check();
void follow_line();
void line_sensor_read();

void ultrasound_update();
void tof_update();

void sweeping();
void hunting();
void identifying();
void pick_block(int speed);
void release_block(int speed);
void mini_sweep();
block_type density_check();

// Create the motor shield object with the default I2C address
Adafruit_MotorShield AFMS = Adafruit_MotorShield();

// the two motors
Adafruit_DCMotor *wheel_left = AFMS.getMotor(1); //the left wheel
Adafruit_DCMotor *wheel_right = AFMS.getMotor(2); // the right wheel

/* Claw Motor */
#define CLAW_CLOSE_DISTANCE    3.2 * 255// Distance in arbitrary units

Adafruit_DCMotor *claw_motor = AFMS.getMotor(3); // The motor for the claw

//Initialise time of flight
DFRobot_VL53L0X sensor;

#define MAX_RANG                      5200         //the max measurement value of the module is 520cm(a little bit longer than effective max range)
#define ADC_SOLUTION                  1023.0   //ADC accuracy of Arduino UNO is 10bit
#define LEFT_WHEEL_RATIO              0.95  //Variables to allow easy calibration of wheels
#define RIGHT_WHEEL_RATIO             1

//Initialise all pin inputs
#define PIN_INPUT                     4 // Button pin
#define PIN_LED_BLUE                  5
#define PIN_LED_GREEN                 6
#define PIN_LED_RED                   7
#define PIN_FAR_LEFT_LINE_SENSOR      8 
#define PIN_LEFT_LINE_SENSOR          9
#define PIN_RIGHT_LINE_SENSOR         10
#define PIN_FAR_RIGHT_LINE_SENSOR     11 

#define PIN_ULTRASOUND                A1

enum claw_pos {OPEN = 0, CLOSED = 1};
claw_pos claw_status = OPEN;

enum state_type {GET_TO_LINE, SEARCHING, SWEEPING, HUNTING, IDENTIFYING, DELIVERING, RETURNING};
state_type state = 0;

int us_distance_bef;
int us_change;
int ultrasonic_dist;
int tof_distance_bef;
int tof_distance;
int tof_change;


//general vars
int counter = 0; //counts each loop that happens, useful for flashing lights
block_type density = NONE;
int num_blocks_collected = 0;//counts number of blocks collected, blocks 1 and 2 are found through searching, blocks 3 and 4 are found through sweeping
bool go_to_sweep_position = false;//activates when robot senses line and is on block 3 and 4

//int time_loop = 500; //variable used to control the motor, I can't explain it well just ignore it

//searching fn
int count_turn_options = 0;
bool approved_right_turn = false;
bool approved_left_turn = false;
int lost_time_count_record = 0; //records the time robot can't find the line for the first time
bool first_instance_lost = true; //used to reocrd first instance robot can't find the line

//sweeping vars
bool first_instance_sweeping = true;

bool start = false; //changes to TRUE and movement starts when button pressed
unsigned short line_sensor_prev = 0b0000; // The previous status of the 4 line sensors (e.g middle 2 on would be 0110)
unsigned short line_sensor = 0b0000; // The status of the 4 line sensors (e.g middle 2 on would be 0110)

//delivery var
int delivery_stage = 0;//changes the stage depending on what the robot needs to do

bool right_turn = false;
int right_turn_time = 0;
bool left_turn = false;
int left_turn_time = 0;
bool forward_line = true;
int forward_line_time = 0;
bool line_straight = true;

enum junc_type {NO_LINE, LINE, T_JUNC, LEFT_BEND, RIGHT_BEND, LEFT_SIDE, RIGHT_SIDE, CROSS} junction;
bool bump = false;

bool moving;

void setup() {
  // Set up Serial library at 9600 bps
  Serial.begin(9600);           
  Serial.println("Adafruit Motorshield v2 - DC Motor test!");

  if (!AFMS.begin()) {         // create with the default frequency 1.6KHz
  // if (!AFMS.begin(1000)) {  // OR with a different frequency, say 1KHz
    Serial.println("Could not find Motor Shield. Check wiring.");
 //   while (1);
  }
  Serial.println("Motor Shield found.");

  // Set the speed to start, from 0 (off) to 255 (max speed)
  // Turn on motor

// Declares pushbutton  and line sensors as inputs
  pinMode(PIN_INPUT, INPUT); 
  pinMode(PIN_LEFT_LINE_SENSOR, INPUT); 
  pinMode(PIN_RIGHT_LINE_SENSOR, INPUT); 
  pinMode(PIN_FAR_RIGHT_LINE_SENSOR, INPUT); 
  pinMode(PIN_FAR_LEFT_LINE_SENSOR, INPUT); 


// Declares all leds as outputs
  pinMode(PIN_LED_BLUE, OUTPUT);
  pinMode(PIN_LED_RED, OUTPUT);
  pinMode(PIN_LED_GREEN, OUTPUT);

// Initialising time of flight sensor
  Wire.begin();
  sensor.begin(0x50);
  sensor.setMode(sensor.eContinuous,sensor.eHigh);
  sensor.start();
  delay(100);
  }

/************************** MAIN LOOP *****************************/
void loop() {
  // Serial.println(ultrasonic_dist);
  // Serial.println(tof_distance);
  // Serial.println(tof_change);

  // Sensor initialisation
  line_sensor_read();
  tof_update();
  ultrasound_update();

  /* BUTTON START CONDITION */
  if (digitalRead(PIN_INPUT) == HIGH) { // check if the input is HIGH
    start = !start;//starts and stops main code

    counter = 0;//reset counter
    delay(500);//quick and dirty way to get rid of switch bounce
    
    delivery_stage = 0;//reset state
    count_turn_options = 0; //resets state
    um_blocks_collected = 0; //resets state
    state = GET_TO_LINE; //this can be easily changed to test other states, the state it should be set to is GET_TO_LINE
  }

  // First cycle initialising states and moving forwards

  if (start) {
    switch (state) {

    case GET_TO_LINE:
    //goes from home to line / center T junction if it needs to sweep
      get_to_line();
      Serial.println("GETTING TO LINE");
      break;

    case SEARCHING:
    //searching a set route of lines
      searching();
Serial.println("SEARCHING");
      break;

    case SWEEPING:
      // Sweeping
      sweeping();
      moving = true;
      digitalWrite(PIN_LED_RED, LOW);  
      digitalWrite(PIN_LED_GREEN, HIGH);
      Serial.println("SWEEPING");
      break;

    case HUNTING:
      // Hunting
      hunting();
      moving = true;
      digitalWrite(PIN_LED_RED, HIGH);  
      digitalWrite(PIN_LED_GREEN, LOW);
      Serial.println("HUNTING");
      break;

    case IDENTIFYING:
      Serial.println("IDENTIFYING");
      identifying();
      break;

    case DELIVERING:
      Serial.println("DELIVERING");
      // Delivering
      moving = true;
      deliver_from_plus_junction();

      delay(50);

      state = RETURNING;
      break;

    case RETURNING:
      Serial.println("RETURNING");
      
      // Returning
      moving = true;
      
      return_from_square();

      delay(5000);
      state = SWEEPING;
      break;
    }
  }

  // Turns LED on if its moving
  if (moving == true) {
    if (counter % 50 < 25) {
      digitalWrite(PIN_LED_BLUE, HIGH);
    } else {
        digitalWrite(PIN_LED_BLUE, LOW);
    }
  } else {
    digitalWrite(PIN_LED_BLUE, LOW);  
  }

  if (counter > 5000 or start == false) {
    straight_ahead(0);
    moving = false;
    start = false;
    digitalWrite(PIN_LED_RED, LOW);  //Resets everything
    digitalWrite(PIN_LED_GREEN, LOW);
  }

  counter++;
  delay(10);
}

// Arduino was being funny and not letting these be after the loop so they're here now
void full_stop(){
  wheel_left->setSpeed(0);
  wheel_right->setSpeed(0);
  Serial.println("stop");
}

void straight_ahead(int speed = speed_var) {   // Drives forwards at max speed
  wheel_left->run(BACKWARD);
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  wheel_right->run(BACKWARD);
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO);
  }
void straight_backwards(int speed = speed_var) {   // Drives backwards at max speed
  wheel_left->run(FORWARD);
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  wheel_right->run(FORWARD);
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO);
}
void veer_right(int speed = speed_var) {   //Continues moving forwards while drifting to the right
    wheel_right->run(BACKWARD);
    wheel_left->run(BACKWARD);
    wheel_left->setSpeed(0.7 * speed * LEFT_WHEEL_RATIO);
    wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO );
    }
void veer_left(int speed = speed_var) {   //Continues moving forwards while drifting to the left
    wheel_right->run(BACKWARD);
    wheel_left->run(BACKWARD);
    wheel_right->setSpeed(0.7 * speed * RIGHT_WHEEL_RATIO);
    wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
    }

void maintain_line(int speed = speed_var) {
  wheel_right->run(BACKWARD);
  wheel_left->run(BACKWARD);
  wheel_left->setSpeed(0.8 * speed * LEFT_WHEEL_RATIO);
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO );
}

void turn_right(int speed = 180) {    //Turns quickly to the right until it hits line
  wheel_left->run(BACKWARD);
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  wheel_right->run(FORWARD);   ///////
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO*0.9);
  delay(1100);
  straight_ahead(0);
  }
void turn_left(int speed = 180) {      //Turns quickly to the left until it hits line
  wheel_right->run(BACKWARD);
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO);
  wheel_left->run(FORWARD);    /////
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  delay(1000);
  straight_ahead(0);
}
void rotate_right(int speed = 100) {      //Steadily turns on the spot to the right
  wheel_left->run(BACKWARD);
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  wheel_right->run(FORWARD);    
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO);
  }
void rotate_left(int speed = 100) {         //Steadily turns on the spot to the left
  wheel_left->run(FORWARD);   
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  wheel_right->run(BACKWARD);
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO);
  }
void rotate_180(int speed = speed_var) {
  wheel_left->run(FORWARD);   
  wheel_left->setSpeed(speed * LEFT_WHEEL_RATIO);
  wheel_right->run(BACKWARD);
  wheel_right->setSpeed(speed * RIGHT_WHEEL_RATIO);
    delay(2000);
}


/******* MOVEMENT FUNCTIONS *********/
/*!
 * \fn void line_turn_check()
 * \brief Runs a 
*/
void line_turn_check() {
  int turn_time = 7;   //Delay between spotting a turn and the latest it could take that turn
  static int line_sensor_snapshot = 0b0000;

  if ((line_sensor ^ line_sensor_prev) & 0b1001) {
    left_turn_time = counter;
    line_sensor_snapshot = line_sensor | line_sensor_prev;
  }
  
  if (counter - left_turn_time == turn_time) { //5 Cycles later check what type of intersection it has hit
    if (!line_sensor) { // If now all sensors are reading nothing
      switch (line_sensor_snapshot | 0b0110) {
        case 0b1110:
          junction = LEFT_BEND;
          Serial.println("Left Bend");
          break;
        case 0b0111:
          junction = RIGHT_BEND;
          Serial.println("Right Bend");
          break;
        case 0b1111:
          junction = T_JUNC;
          Serial.println("T Junction");
          break;
        default:
          junction = NO_LINE;
          Serial.println("No Line???");
      }
    } else if (line_sensor & 0b0110) { // Checks if middle sensors are on
      switch (line_sensor_snapshot | 0b0110) {
        case 0b1110:
          junction = LEFT_SIDE;
          break;
        case 0b0111:
          junction = RIGHT_SIDE;
          break;
        case 0b1111:
          junction = CROSS;
          break;
        default:
          junction = LINE;
          break;
      }
    }
  }
}

void follow_line() {
  line_sensor_read();
  line_turn_check();
  Serial.println(line_sensor, BIN);
  Serial.println(junction);
   switch (junction) {
    /* Use line following */
    /* Turn Left Cases */

    default:
      if (~line_sensor & 0b0100) { // If sensor 2 is off
        // Serial.println("veer left");

        veer_left(220);
      } else if (~line_sensor & 0b0010) {// If sensor 3 is off
        // Serial.println("veer right");

        veer_right(220);
      } else {
        maintain_line(180);
      }
      break;
  }
}



/*************** ROBOT STATE FUNCTIONS *************/
/*!
 * \fn void get_to_line()
 * \brief Sweeping state main function
*/  

void get_to_line(){
  
  line_sensor_read();
  if (~line_sensor){
  if (num_blocks_collected % 4 < 3){// if blocks 1 and 2 out of 4, goes to searching stage
    straight_ahead(180);
    delay(800);
    full_stop();
    state = SEARCHING;
  }}
  else{ // if blocks 3 and 4, goes to sweeping stage
    go_to_sweep_position = true;
  }

  if (go_to_sweep_position){
    follow_line();
    if (~!line_sensor){
      state = SWEEPING;
    }
  }

}


/*!
 * \fn void searching()
 * \brief Sweeping state main function
*/  
void searching() {
  static bool forward = true;
  static int previous_junction = junction;
  Serial.println("STAY ON THE LINE PLEASE");
  follow_line();
  if (forward && previous_junction != junction && junction != NO_LINE && junction != LINE) {
    straight_ahead(0);
    delay(500);
    Serial.println("ITS A TURN ITS A TURN AHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH DO SOMETHING");
    count_turn_options++;
    junction = LINE;
    if (tof_distance < 80) {      // when at a block switch to identifying state
      straight_ahead(0);
      int dens_count = 0;
      int i = 0;
      for (i=0;i<100;i++) {
        tof_update();
        ultrasound_update();
        // Checks the identifying function and records how many times it says high or low
        if (density_check() == LOW_DENSITY) {
          dens_count++;
        } else if (density_check() == HIGH_DENSITY) {
          dens_count--;
          delay(10);
        }
      }
      // Once it has checked 100 times
      if (dens_count > 25) {     // If it has been high desnity more it lights red LED
        digitalWrite(PIN_LED_RED, HIGH);
        digitalWrite(PIN_LED_GREEN, LOW);
        density = LOW_DENSITY;
        forward = false;
        pick_block(255);
        delay(10);
        turn_right();
        turn_right();
      } else if (dens_count < -25) {      
        digitalWrite(PIN_LED_GREEN, HIGH);
        digitalWrite(PIN_LED_RED, LOW);
        density = HIGH_DENSITY;
        forward = false;
        pick_block(255);
        delay(10);
        turn_right();
        turn_right();
      } else {
        density = NONE;
      }}
    
      switch (count_turn_options) {
      case 1:
        turn_left();
        follow_line();
        break;
      case 3:
        turn_right();
        follow_line();
        break;
      case 4:
        turn_right();
        follow_line();
        break;
      case 8:
        turn_right();
        follow_line();
        break;
      case 9:
        turn_right();
        follow_line();
        break;
      case 11:
        turn_right();
        follow_line();
        break;
      case 12:
        straight_ahead(0);
        state = SWEEPING;
        break;
      }
    
  }

  if (!forward && previous_junction != junction && junction != NO_LINE && junction != LINE) {
    // WHEN CASE = 0, THATS WHEN WE TURN LEFT, GO HOME, TURN LEFT/RIGHT, GO HOME, GO TO CROSSROADS, RESET FORWARD FLAG, SET BLOCK TO NONE
    count_turn_options--;
    junction = LINE;

    switch (count_turn_options) {

      case 0:
        state = DELIVERING;
        deliver_from_plus_junction();

        break;
      case 1:
        turn_right();
        follow_line();
                
      //// insert deliver block across gap here

        break;
      case 3:
        turn_left();
        follow_line();
        break;
      case 4:
        turn_left();
        follow_line();
        break;
      case 8:
        turn_left();
        follow_line();
        break;
      case 9:
        turn_left();
        follow_line();
        break;
      case 11:
        turn_left();
        follow_line();
        break;
      case 12:
      follow_line();
      break;
    }
  }

//bool first_instance_lost = true;<- records the first instance robot cant find the line
if (junction = NO_LINE){
  Serial.println("I'm lost!");
  if (first_instance_lost){
    lost_time_count_record = counter;//records the number of the first loop that robot cant find the line
    first_instance_lost = false;
  }else{
    if (counter - lost_time_count_record > 1200){ //if robot can't find the line for 12 seconds, will go into a sweep
      state = SWEEPING;
    }
  }
}else{
  first_instance_lost = true;//resets for the next time the robots lost
}


}



/*!
 * \fn void sweeping()
 * \brief Sweeping state main function
*/  
int sweep_count_record;

void sweeping() {
  bool rotation_direction = 1;
  if (rotation_direction == 1) {
    rotate_right();
  } else {
    rotate_left();
  }

  if (us_change < -200) {
    delay(50);  // Slightly overrotates as it will be detected on the edge and we want middle
    state = HUNTING;
    rotation_direction = !rotation_direction;
  }
if (first_instance_sweeping){
    sweep_count_record = counter;
    first_instance_sweeping = false;
  }
  if (counter - sweep_count_record > 2500){ //if sweeps for more than 25 seconds, will find somewhere else 
    if (tof_distance < 160){//this is when sweeping somehow ends up near a wall
      straight_backwards(255);
      Serial.println("couldn't find anything. backing up");
      delay(6000);//backs up for 6 seconds
      full_stop();
    }else{
      straight_ahead(255);
      Serial.println("couldn't find anything. going forward");
      delay(3000); //goes forward for three seconds
      full_stop;
    }
  }
}

/*!
 * \fn void hunting()
 * \brief Sweeping state main function
*/  
void hunting() {
  // Drives ahead towards block
  straight_ahead(speed_var);
  // If it no longer sees the block it starts to sweep
  if (us_change > 200) {
    mini_sweep();
  }

  if (tof_distance < 80) {      // when at a block switch to identifying state
    straight_ahead(0);
    state = IDENTIFYING;
  }
}

void identifying() {
  static int low_dens_count = 0;
  static int high_dens_count = 0;
  // Identifying
  moving = false;
  if(low_dens_count + high_dens_count == 0) {
    pick_block(255);
    release_block(255);
  }
  // Checks the identifying function and records how many times it says high or low
  if (density_check() == LOW_DENSITY) {
    digitalWrite(PIN_LED_GREEN, HIGH);
    digitalWrite(PIN_LED_RED, LOW);
    low_dens_count += 1;
  } else {
    if (density_check() == HIGH_DENSITY) {
      digitalWrite(PIN_LED_RED, HIGH);
      digitalWrite(PIN_LED_GREEN, LOW);
      high_dens_count += 1;
    } else {
      digitalWrite(PIN_LED_RED, HIGH);  //PANIC
      digitalWrite(PIN_LED_GREEN, HIGH);
      state = SWEEPING;
    }
  }

  if (high_dens_count + low_dens_count == 100) {   // Once it has checked 100 times
    num_blocks_collected += 1;
    if (high_dens_count > 50) {     // If it has been high desnity more it lights red LED
      digitalWrite(PIN_LED_RED, HIGH);
      digitalWrite(PIN_LED_GREEN, LOW);
      density = HIGH_DENSITY;
    } else {      
      digitalWrite(PIN_LED_GREEN, HIGH);
      digitalWrite(PIN_LED_RED, LOW);

      density = LOW_DENSITY;
    }
    pick_block(255);
    delay(5000);    // Waits 5 seconds
    digitalWrite(PIN_LED_RED, LOW);  //Resets everything
    digitalWrite(PIN_LED_GREEN, LOW);

    // Resets counters for how many times each

    high_dens_count = 0;
    low_dens_count = 0;   
    state = DELIVERING;
  }
}


/*!
 * \fn delivering()
 * \brief gets back to line from the abyss and delivers block to correct box
*/

void follow_line_abyss() {
  line_sensor_read();
  line_turn_check();
  Serial.println(line_sensor, BIN);
  Serial.println(junction);
switch (junction) {
    /* Use line following */
    /* Turn Left Cases */
    case LEFT_BEND:
      turn_left();
      straight_ahead();
      junction = LINE;
      break;
    case RIGHT_BEND:
      turn_right();
      straight_ahead();
      junction = LINE;
      break;
    case RIGHT_SIDE:
  if (density == LOW_DENSITY) {
    while (line_sensor_read != 0b1111) {
      straight_ahead(255);
    }
    straight_ahead(150);
        delay(600);
        release_block(255);
        while (line_sensor_read != 0b0000) {
          straight_backwards(150);
        }
      turn_right();
      while(junction != LEFT_BEND || LEFT_SIDE) {
      follow_line();
    }
    straight_ahead();
      while (line_sensor_read == 0b0000) {
      straight_ahead();
        }
      while (junction != RIGHT_BEND || RIGHT_SIDE) {
        follow_line();
      }
      turn_right();
        straight_backwards(255);
        delay(3000);
        straight_ahead(150);
        delay(500);
        straight_ahead(0);                //// HOME!!! WIN!!
        delay(999999999999);
      }
      else {
        turn_right();
        turn_right();
      }
      junction = LINE;
      break;
    case LEFT_SIDE:
      if (density == HIGH_DENSITY) {
        while (line_sensor_read != 0b1111) {
          straight_ahead(255);
        }
        straight_ahead(150);
        delay(600);
        release_block(255);
while (line_sensor_read != 0b0000) {
          straight_backwards(150);
        }
        turn_right();
        while(junction != RIGHT_BEND || RIGHT_SIDE) {
          follow_line();
        }
        straight_ahead();
        while (line_sensor_read == 0b0000) {
      straight_ahead();
    }
while (junction != LEFT_BEND || LEFT_SIDE) {
    follow_line();
    }
      turn_left();
      straight_backwards(255);
        delay(3000);
        straight_ahead(150);
        delay(500);
        straight_ahead(0);                //// HOME!!! WIN!!
        delay(999999999999);
      }
      else {
        turn_left();
        turn_left();
      }
    junction = LINE;
      break;
    case T_JUNC:
      if (density == HIGH_DENSITY){
        turn_left();
      } else {
      turn_right();
}
      junction = LINE;
      break;
    default:
      if (~line_sensor & 0b0100) { // If sensor 2 is off
        veer_right(220);
      } else if (~line_sensor & 0b0010) {// If sensor 3 is off
        veer_left(220);
      } else {
        maintain_line(180);
      }
    break;
  }
}

void delivering_abyss() {
line_sensor_read();
  line_turn_check();

switch (junction) {
    /* Use line following */
    /* Turn Left Cases */
    case LEFT_BEND:
      turn_left();
      straight_ahead();
      junction = LINE;
      break;
    case RIGHT_BEND:
      turn_right();
      straight_ahead();
      junction = LINE;
      break;
    case RIGHT_SIDE:
  if (density == LOW_DENSITY) {
    while (line_sensor_read != 0b1111) {
      straight_ahead(255);
    }
    straight_ahead(150);
        delay(600);
        release_block(255);
        while (line_sensor_read != 0b0000) {
          straight_backwards(150);
        }
      turn_right();
      while(junction != LEFT_BEND || LEFT_SIDE) {
      follow_line();
    }
    straight_ahead();
      while (line_sensor_read == 0b0000) {
      straight_ahead();
        }
      while (junction != RIGHT_BEND || RIGHT_SIDE) {
        follow_line();
      }
      turn_right();
        straight_backwards(255);
        delay(3000);
        straight_ahead(150);
        delay(500);
        straight_ahead(0);                //// HOME!!! WIN!!
        delay(999999999999);
      }
      else {
        turn_right();
        turn_right();
      }
      junction = LINE;
      break;
    case LEFT_SIDE:
      if (density == HIGH_DENSITY) {
        while (line_sensor_read != 0b1111) {
          straight_ahead(255);
        }
        straight_ahead(150);
        delay(600);
        release_block(255);
while (line_sensor_read != 0b0000) {
          straight_backwards(150);
        }
        turn_right();
        while(junction != RIGHT_BEND || RIGHT_SIDE) {
          follow_line();
        }
        straight_ahead();
        while (line_sensor_read == 0b0000) {
      straight_ahead();
    }
while (junction != LEFT_BEND || LEFT_SIDE) {
    follow_line();
    }
      turn_left();
      straight_backwards(255);
        delay(3000);
        straight_ahead(150);
        delay(500);
        straight_ahead(0);                //// HOME!!! WIN!!
        delay(999999999999);
      }
      else {
        turn_left();
        turn_left();
      }
    junction = LINE;
      break;
    case T_JUNC:
      if (density == HIGH_DENSITY){
        turn_left();
      } else {
      turn_right();
}
      junction = LINE;
      break;
    default:
      if (~line_sensor & 0b0100) { // If sensor 2 is off
        veer_right(220);
      } else if (~line_sensor & 0b0010) {// If sensor 3 is off
        veer_left(220);
      } else {
        maintain_line(180);
      }
    break;
  }
}


void deliver_from_plus_junction(){
  //assume it starts on first + junction
   //delivery stages -> 0: go straight until T junction 1: continue for like 1.5 seconds, then rotate 90* left/right 2: travel until line senses 3:back up same amount of time
  switch (delivery_stage){
    case 0:
      follow_line();
      if (junction == T_JUNC || LEFT_SIDE || RIGHT_SIDE){
        delivery_stage = 1;
    }
    break;
    case 1:
    Serial.println("off of line, going straight");
      straight_ahead();
      delay(1000); //needs to get to a vague middle of the box
    straight_ahead(0);
    delay(50);
    if (density == LOW_DENSITY){
      turn_left();
    }else{
      turn_right();
    }
    Serial.println("rotating");
    straight_ahead();
    delay(800)
    delivery_stage = 2;
    break;


    case 2:

    line_sensor_read(); //still going straight ahead due to end of case 1
    if (line_sensor != 0b0000 ) {
      Serial.println("found line");
      full_stop();
      delay(100);
      release_block(255);
      delivery_stage = 3;
        }

    case 3:

      straight_backwards();
      delay(1000);
      if (line_sensor != 0b0000) {
        delay(450);
        straight_ahead(0);
        delay(9999999999);
      }


  }
}


/*!
 * \fn returns from red or green box to home
 * \brief runs the motors to pick the block
 * \param speed speed of grabber (0-255) 
*/

void return_from_square(){

  if (num_blocks_collected % 4 > 2){ //on blocks 3 and 4, it delivers the block from the line, not the centre, so it needs to turn before it returns home
    if (density == HIGH_DENSITY){
turn_right();
    }else{
      turn_left();
    }
  }

  straight_backwards(200);
  delay(3000); //so doesn't see the first line
  line_sensor_read();
  if (~line_sensor & 0b1111){
      Serial.println("found line");
      delay(1700); //continues until the vague middle of box
      full_stop();//stops
      delay(500);
      if (density == HIGH_DENSITY){
              rotate_right();
      }else{
              rotate_left();
      }
      delay(3000); //rotates for 3 seconds
      Serial.println("rotated");
      state = GET_TO_LINE;
  }
}


/*!
 * \fn pick_block(int speed)
 * \brief runs the motors to pick the block
 * \param speed speed of grabber (0-255) 
*/
void pick_block(int speed = speed_var) {
  if (claw_status == OPEN) {
    claw_motor->setSpeed(speed);
    claw_motor->run(FORWARD);
    delay(CLAW_CLOSE_DISTANCE * 1000.0 / speed);
    claw_motor->setSpeed(0);
    claw_motor->run(FORWARD);
    claw_status = CLOSED;
  } else {
      // serial.ln("Claw already closed");
  }
}


/*!
 * \fn release_block(int speed)
 * \brief runs the motors to release the block
 * \return type of block identified (block_type)
*/
block_type density_check() {
  // Serial.print("TOF:");
  // Serial.println(tof_distance);
  // Serial.print("US:");
  // Serial.println(ultrasonic_dist);

  if (tof_distance > 150) {
    return NONE;
  } else {
      if (ultrasonic_dist >5000 or ultrasonic_dist < 150) {  //use US sensor to determine density
        return LOW_DENSITY;     //low dens
      }
    else {
      return HIGH_DENSITY;    //high dens
    }
  }
}

/*!
 * \fn void release_block(int speed)
 * \brief Runs the motors to release the block
 * \param speed speed of grabber (0-255) 
*/
void release_block(int speed = 255) {
  if (claw_status == CLOSED) {
    claw_motor->setSpeed(speed);
    claw_motor->run(BACKWARD);
    delay(CLAW_CLOSE_DISTANCE * 1200.0 / speed);
    claw_motor->setSpeed(0);
    claw_motor->run(BACKWARD);
    claw_status = OPEN;
  } else {
    Serial.println("Claw already open");
  }  
}

void line_sensor_read() {
  line_sensor_prev = line_sensor;
  line_sensor = 0b0000;
  if (digitalRead(PIN_FAR_LEFT_LINE_SENSOR) > 0.5) {
    line_sensor |= 0b1000;
  }
  if (digitalRead(PIN_LEFT_LINE_SENSOR) > 0.5) {
    line_sensor |= 0b0100;
  }
  if (digitalRead(PIN_RIGHT_LINE_SENSOR) > 0.5) {
    line_sensor |= 0b0010;
  }
  if (digitalRead(PIN_FAR_RIGHT_LINE_SENSOR) > 0.5) {
    line_sensor |= 0b0001;
  }
}

void mini_sweep() {
  Serial.println("Mini Sweep");
  int mini_sweep_counter = 0;
  while (mini_sweep_counter < 301) {
    if (mini_sweep_counter < 100) {
    rotate_left(100);  
    } else {
    rotate_right(100);
    }

    ultrasound_update();

    if (us_change < -200) {
      delay(100);                    // Slightly overrotates as it will be detected on the edge and we want middle
      straight_ahead(0);
      state = HUNTING;
      mini_sweep_counter = 500;
    } else {
      if (mini_sweep_counter == 300) {
        state = SWEEPING;
      }
    }
    mini_sweep_counter++;
    delay(10);
  }
}

/*!
 * \fn void ultrasound_update();
 * \brief refreshes us_distance_bef and us_distance
*/
void ultrasound_update() {
  // Updates ultrasonic variables
  us_distance_bef = ultrasonic_dist;
  ultrasonic_dist = analogRead(PIN_ULTRASOUND) * (MAX_RANG / ADC_SOLUTION);
  if (ultrasonic_dist != 0) { //Checks if it is reporting 0 or max to exclude that data
    us_change = ultrasonic_dist - us_distance_bef;
  }
}

/*!
 * \fn void tof_update()
 * \brief refreshes tof_distance_bef and tof_distance
*/
void tof_update() {
  tof_distance_bef = tof_distance;
  if (sensor.getDistance() > 0) {
    tof_distance = sensor.getDistance();
  }
  if (tof_distance > 0 and tof_distance < 2047) { //Checks if it is reporting 0 or max to exclude that data
    tof_change = tof_distance - tof_distance_bef;
  }
}


void deliver_from_crossroad(){
  //assume it starts on first + junction
   //delivery stages -> 0: go straight until T junction 1: continue for like 1.5 seconds, then rotate 90* left/right 2: travel until line senses 3:back up same amount of time
  line_turn_check();
  switch (delivery_stage){

    case 0:   //Travelling from crossroads to starting box
    follow_line();
    if (junction == T_JUNC || LEFT_BEND || RIGHT_BEND){
      delivery_stage = 1;
    }
    break;

    case 1:      //Getting within the box and rotate 90 degrees
      Serial.println("off of line, going straight");
      straight_ahead();
      delay(1700); //needs to get to a vague middle of the box
      full_stop();
      delay(50);
      if (density == LOW_DENSITY){ //Checks where to deliver to
        turn_left();
      }else{
        turn_right();
      }
      Serial.println("Turned to face delivery zone");
      straight_ahead();
      delay(2000);

      delivery_stage = 2;
      break;

    case 2:  //Jumping the gap

    line_turn_check(); //still going straight ahead due to end of case 1
    if (line_sensor == 0b0000){
      straight_ahead();
    }else{
      Serial.println("found line");
      full_stop();
      delay(100);
      release_block(255);
      delivery_stage = 3;
      straight_backwards();
      delay(1000);
    }
      break;
      
      case 3:    //Returning to starting square

      line_turn_check(); //still going straight ahead due to end of case 
      if (line_sensor == 0b0000){
        straight_backwards();
      }else{
        Serial.println("Starting square");
        full_stop();
        delay(100);
        if (density == HIGH_DENSITY){
          turn_right();
        }else{
          turn_left();
        }
      }
    }
  }